generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id          Int       @id @default(autoincrement())
  title       String    @unique
  description String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  chapters    Chapter[]

  @@map("courses")
}

model Chapter {
  id        Int        @id @default(autoincrement())
  title     String
  courseId  Int
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  materials Material[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("chapters")
}

enum MaterialType {
  text
  simulation
}

model Material {
  id           Int          @id @default(autoincrement())
  title        String
  type         MaterialType
  content      String
  chapterId    Int
  chapter      Chapter      @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  simulation   Simulation?  @relation(fields: [simulationId], references: [id], onDelete: SetNull)
  simulationId Int?
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  @@map("materials")
}

model Simulation {
  id        Int        @id @default(autoincrement())
  scene     String
  materials Material[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("simulations")
}

model Quiz {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  questions   Question[]
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  @@map("quizzes")
}

model Question {
  id        Int                    @id @default(autoincrement())
  text      String
  quizId    Int
  quiz      Quiz                   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   MultipleChoiceOption[]
  type      QuestionType           @default(multipleChoice)
  createdAt DateTime               @default(now()) @map("created_at")
  updatedAt DateTime               @updatedAt @map("updated_at")

  @@map("questions")
}

enum QuestionType {
  multipleChoice
  trueFalse
  fillInTheBlank
}

model MultipleChoiceOption {
  id         Int      @id @default(autoincrement())
  text       String
  isCorrect  Boolean
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("multiple_choice_options")
}
